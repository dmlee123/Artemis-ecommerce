{"version":3,"file":"static/js/208.5210564e.chunk.js","mappings":"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","sources":["components/button/Button.jsx","components/button/button.styles.js","components/formInput/FormInput.jsx","components/sign-in-form/SignUpForm.jsx","components/sign-up-form/SignInForm.jsx","routes/authentication/Authentication.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React from 'react'\nimport { BaseButton, GoogleSignInButton, InvertedButton } from \"./button.styles\"\nimport { SpinnerButton } from './button.styles';\n\n/*\nwe have 3 buttons\ndefault\ninverted\ngoogle sign in\n    - what we will do is make an object(hash table on line 19) with those 3 different types and give them different css classes \n*/\n\nexport const buttonTypeClasses = {\n    base: \"base\",\n    google: 'google-sign-in',\n    inverted: \"inverted\",\n}\n\nconst getButton = (buttonType = buttonTypeClasses.base) =>\n ({\n    [buttonTypeClasses.base]: BaseButton,\n    [buttonTypeClasses.google]: GoogleSignInButton,\n    [buttonTypeClasses.inverted]: InvertedButton,\n  }[buttonType]);\n\n\n\nfunction Button({ children, buttonType, isLoading, ...otherProps}) {\n\n  const CustomButton = getButton(buttonType);\n\n  return (\n    <CustomButton disabled ={isLoading} {...otherProps}>\n        {isLoading ? <SpinnerButton /> : children}\n    </CustomButton>\n  )\n}\n// reason why you cannot do buttonTypeClasses.buttonType in this case is bc buttonType is attached to buttonTypeClasses (so can not change the value of buttonType)\n// but with [ ] you can - is not attached to buttonTypeClasses\nexport default Button\n","import styled from \"styled-components\"\n\n\nexport const BaseButton = styled.button`\n\tmin-width: 165px;\n\twidth: auto;\n\theight: 50px;\n    // height:auto;\n\tletter-spacing: 0.5px;\n\tline-height: 50px;\n\tpadding: 0 35px 0 35px;\n\tfont-size: 15px; //add to cart box does not fit in box when small\n\tbackground-color: black;\n\tcolor: white;\n\ttext-transform: uppercase;\n\tfont-family: 'Open Sans', sans-serif;\n\tfont-weight: bolder;\n\tborder: none;\n\tcursor: pointer;\n\tdisplay: flex;\n\tjustify-content: center;\n\n\t&:hover {\n\t\tbackground-color: white;\n\t\tcolor: black;\n\t\tborder: 1px solid black;\n\t}\n`\n\nexport const GoogleSignInButton = styled(BaseButton)`\n\tbackground-color: #4285f4;\n\tcolor: white;\n\n\t&:hover {\n\t\tbackground-color: #357ae8;\n\t\tborder: none;\n\t}\n`\n\nexport const InvertedButton = styled(BaseButton)`\n\tbackground-color: white;\n\tcolor: black;\n\tborder: 1px solid black;\n\n\t&:hover {\n\t\tbackground-color: black;\n\t\tcolor: white;\n\t\tborder: none;\n\t}\n`\n\nexport const SpinnerButton = styled.div`\n\tdisplay: inline-block;\n\twidth: 30px;\n\theight: 30px;\n\tborder: 3px solid rgba(195, 195, 195, 0.6);\n\tborder-radius: 50%;\n\tborder-top-color: #636767;\n\tanimation: spin 1s ease-in-out infinite;\n\t-webkit-animation: spin 1s ease-in-out infinite;\n\t@keyframes spin {\n\t\tto {\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t}\n\t}\n\t@-webkit-keyframes spin {\n\t\tto {\n\t\t\t-webkit-transform: rotate(360deg);\n\t\t}\n\t}\n`;","import React from 'react'\nimport \"./formInput.styles.scss\"\n\n// since there are so many label props, we can use spread operator to copy\nfunction FormInput({label, ...otherProps}) {\n\n  return (\n    <div className = \"group\">\n          {label && ( \n        <label className = {`${otherProps.value.length ? \"shrink\" : \"\"} form-input-label`}>{label}</label>\n        )}\n         <input className= \"form-input\" {...otherProps}/>\n      \n    </div>\n  )\n}\n\n//conditional rendering on line 10\n// also added a space after \"shrink \" on line 11 for scss to work\nexport default FormInput","import React from 'react'\nimport { useState } from 'react' \nimport { createAuthUserWithEmailAndPassWord, createUserDocumentFromAuth} from '../../utils/firebase/firebase';\nimport Button, {buttonTypeClasses} from '../button/Button';\nimport FormInput from '../formInput/FormInput';\nimport \"./signUpForm.scss\"\n\n\n\nfunction SignUpForm() {\n\n\n\n  const [formFields, setFormFields] = useState({\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  const resetFormFields = () => {\n    setFormFields({\n      displayName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if(formFields.password !== formFields.confirmPassword){\n      alert(\"passwords do not match\");\n      return;\n    }\n    try {\n      const response = await createAuthUserWithEmailAndPassWord(formFields.email,formFields.password);\n      console.log(response)\n      await createUserDocumentFromAuth(response.user, formFields.displayName);\n      resetFormFields();\n      \n    } catch(error){\n      if (error.code === \"auth/email-already-in-use\"){\n        alert(\"Email already in use\")\n      } else { \n        console.log(\"user creation encountered an error\" , error)\n      }\n    \n    }\n  }\n\n  //how to use one handleChange function in a controlled form to take in multiple values\n  const handleChange = (event) => {\n    // console.log(event.target)\n \n    // bc our state formFields have the same name as the input tag name, setFormFields is able to grab that specific FormInput and update it\n    setFormFields({...formFields, [event.target.name]:event.target.value})\n  }\n\n\n  return (\n    <div className = \"sign-up-container\">\n      <h2>Don't have an account?</h2>\n      <span>Sign up with your email and password</span>\n       <form onSubmit = {handleSubmit}>\n      \n        {/* only reason we need value attribute for this is becase we are using it for a css property in FormInput */}\n        <FormInput label = \"Display Name\" autoComplete = \"new-password\" type = \"text\" required onChange ={handleChange} name =\"displayName\" value = {formFields.displayName}/>\n        \n        <FormInput label = 'Email' autoComplete = \"new-password\" type = \"email\" required onChange ={handleChange} name =\"email\" value = {formFields.email}/>\n\n        <FormInput label = 'Password' autoComplete = \"new-password\" type=\"password\" required onChange ={handleChange} name =\"password\" value = {formFields.password} minLength = \"8\"/>\n\n        <FormInput label = 'Confirm Password' autoComplete = \"new-password\" type=\"password\" required onChange ={handleChange} name =\"confirmPassword\" value = {formFields.confirmPassword} minLength = \"8\"/>\n\n         {/* <FormInput label = 'Confirm Password' inputOptions = {{\n           autoComplete:\"new-password\", type:\"password\", required:true, onChange:handleChange, name :\"confirmPassword\", value:formFields.confirmPassword, minLength: \"8\"\n          }}\n        /> */}\n        {/* above - if you want to pass down props another way - putting everything into inputOptions object */}\n\n        <Button type =\"submit\" >Sign Up</Button>\n       </form>\n    </div>\n  )\n}\n\nexport default SignUpForm","import React from 'react'\nimport { useState } from 'react' \nimport { signInAuthUserWithEmailAndPassWord, createUserDocumentFromAuth, signInWithGooglePopup} from '../../utils/firebase/firebase';\nimport Button, {buttonTypeClasses} from '../button/Button';\nimport FormInput from '../formInput/FormInput';\nimport \"./signInForm.scss\"\n\n\n\n\nfunction SignInForm() {\n\n\n\n  const [formFields, setFormFields] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const resetFormFields = () => {\n    setFormFields({\n      email: \"\",\n      password: \"\",\n    })\n  }\n\n    const signInWithGoogle = async () => {\n        await signInWithGooglePopup();\n    }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await signInAuthUserWithEmailAndPassWord(formFields.email, formFields.password)\n      console.log(response)\n      resetFormFields();\n\n    } catch(error){\n      // switch(error.code){\n      //   case \"auth/user-not-found\":\n      //    alert(\"Email not found\")\n      //     break\n      //   case \"auth/wrong-password\":\n      //     alert(\"Incorrect password for email\")\n      //     break\n      //   default:\n      //     console.log(error)\n      // }  \n      if (error.code === \"auth/wrong-password\"){\n        alert(\"Incorrect password for email\")\n      } else if (error.code === \"auth/user-not-found\"){\n        alert(\"Email not found\")\n      } else {\n        console.log(error)\n      }\n     \n    }\n  }\n\n  const handleChange = (event) => {\n      // need brackets over event.target.name bc if not it wont grab that name, it will literally grab \"event.target.name\"\n      // it uses event.target.name to distinguish which name to use\n      // need spread since there are multiple formFields and only one is changing\n     setFormFields({...formFields, [event.target.name]:event.target.value})\n  }\n\n  return (\n    <div className = \"sign-up-container\">\n      <h2>Already have an account?</h2>\n      <span>Sign in with your email and password</span>\n       <form onSubmit = {handleSubmit}>\n     \n        <FormInput label = 'Email' autoComplete = \"new-password\" type = \"email\" required onChange ={handleChange} name =\"email\" value = {formFields.email}/>\n\n        <FormInput label = 'Password' autoComplete = \"new-password\" type=\"password\" required onChange ={handleChange} name =\"password\" value = {formFields.password} minLength = \"8\"/>\n          <div className = \"buttons-container\">  \n            <Button type =\"submit\" >Sign in</Button>\n            <Button type =\"button\" buttonType = {buttonTypeClasses.google} onClick = {signInWithGoogle} >Google sign in</Button>\n          </div>\n       </form>\n    </div>\n  )\n}\n\n//need a type=\"button\" for line 84 - the google sign in button - bc if not it will trigger the \"email not found\" alert bc by default, button is type=\"submit\" in forms so it will submit the form\n\nexport default SignInForm","import React from 'react'\nimport { useEffect, useState } from 'react';\nimport { getRedirectResult } from 'firebase/auth';\nimport SignUpForm from '../../components/sign-in-form/SignUpForm';\nimport SignInForm from '../../components/sign-up-form/SignInForm';\nimport \"./authentication.scss\"\n\n\nfunction Authentication() {\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    // useEffect(async () => {\n    //    const response = await getRedirectResult(auth);\n    //    if (response) {\n    //        const userDocRef = await createUserDocumentFromAuth(response.user)\n    //    }\n    // },[])\n\n  return (\n    <div className = \"authentication-container\">\n      <SignInForm />\n     <SignUpForm/> \n    </div>\n  )\n}\n\nexport default Authentication","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["buttonTypeClasses","base","google","inverted","children","buttonType","isLoading","otherProps","CustomButton","BaseButton","GoogleSignInButton","InvertedButton","getButton","disabled","styled","SpinnerButton","label","className","value","length","useState","displayName","email","password","confirmPassword","formFields","setFormFields","handleSubmit","event","preventDefault","alert","createAuthUserWithEmailAndPassWord","response","console","log","createUserDocumentFromAuth","user","code","handleChange","target","name","onSubmit","autoComplete","type","required","onChange","minLength","Button","signInWithGoogle","signInWithGooglePopup","signInAuthUserWithEmailAndPassWord","onClick","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}